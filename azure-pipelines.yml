# Node.js Express Web App to Linux on Azure
# Build a Node.js Express app and deploy it to Azure as a Linux web app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master

variables:

  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'Azure for Students(3554b79f-4c45-452f-9b6a-485c7dedcfce)'

  # Web app name
  webAppName: 'backendoptiplanbd'

  # Environment name
  environmentName: 'APIEnv'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    - script: |
        yarn install
        yarn build
      displayName: 'yarn install and build'
      
    - task: CopyFiles@2
      inputs:
        Contents: 'package*.json'
        TargetFolder: 'dist'

    - script: |
        yarn install
      displayName: 'yarn install in dist'
      workingDirectory: 'dist'

    - task: CopyFiles@2
      inputs:
        Contents: 'dist/**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
        includeRootFolder: true
        archiveType: zip
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(environmentName)
    
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          # - task: DownloadBuildArtifacts@1
          #   inputs:
          #     buildType: 'specific'
          #     project: 'aa92d4f4-3fec-4aea-8a1a-6cfa07a8f9f6'
          #     pipeline: '3'
          #     buildVersionToDownload: 'specific'
          #     buildId: '90'
          #     downloadType: 'single'
          #     artifactName: 'drop'
          #     itemPattern: '**/*.zip'
          #     downloadPath: '$(System.ArtifactsDirectory)'
          - task: AzureWebApp@1
            displayName: 'Azure Web App Deploy:'  
            env:
              # DB_HOST: $(AZURE_POSTGRESQL_HOST)
              # DB_NAME: $(AZURE_POSTGRESQL_DATABASE)
              # DB_PASSWORD: $(AZURE_POSTGRESQL_PASSWORD)
              # DB_PORT: $(AZURE_POSTGRESQL_PORT)
              # DB_USERNAME: $(AZURE_POSTGRESQL_USER)
              # STAGE: $(STAGE)

              DB_HOST: $(ELP_HOST)
              DB_NAME: $(ELP_NAME)
              DB_PASSWORD: $(ELP_PASSWORD)
              DB_PORT: $(ELP_PORT)
              DB_USERNAME: $(ELP_USERNAME)
              STAGE: $(STAGE)


              # AZURE_POSTGRESQL_HOST: $(AZURE_POSTGRESQL_HOST)
              # AZURE_POSTGRESQL_DATABASE: $(AZURE_POSTGRESQL_DATABASE)
              # AZURE_POSTGRESQL_PASSWORD: $(AZURE_POSTGRESQL_PASSWORD)
              # AZURE_POSTGRESQL_PORT: $(AZURE_POSTGRESQL_PORT)
              # AZURE_POSTGRESQL_SSL: $(AZURE_POSTGRESQL_SSL)
              # AZURE_POSTGRESQL_USER: $(AZURE_POSTGRESQL_USER)
            inputs:
              azureSubscription: $(azureSubscription)
              appType: webAppLinux
              appName: $(webAppName)
              runtimeStack: 'NODE|18.16'
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
              # package: $(System.ArtifactsDirectory)/**/*.zip
              startUpCommand: 'pm2 start /home/site/wwwroot/a/dist/main.js --no-daemon'